import React, {useState} from 'react';
import * as XLSX from 'xlsx';

function ExcelUploader() {
    const [data, setData] = useState([]); // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const [groupedData, setGroupedData] = useState([]); // –°–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏ —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const [sortConfig, setSortConfig] = useState(null); // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
    const handleFileUpload = (event) => {
        const file = event.target.files[0]; // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–±—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            console.log(handleFileUpload)
        if (file) {
            const reader = new FileReader();
            console.log(reader)
            reader.onload = (e) => {
                const binaryStr = e.target.result; // –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –≤ –±–∏–Ω–∞—Ä–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
                const workbook = XLSX.read(binaryStr, {type: 'binary'}); // –ß–∏—Ç–∞–µ–º –∫–Ω–∏–≥—É Excel

                const sheetName = workbook.SheetNames[0]; // –ò–º—è –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Å—Ç–∞
                const sheet = workbook.Sheets[sheetName]; // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –ª–∏—Å—Ç–∞

                const jsonData = XLSX.utils.sheet_to_json(sheet); // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ª–∏—Å—Ç–∞ –≤ JSON
                setData(jsonData); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                groupAndSummarizeData(jsonData); // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –∏ —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
            };

            reader.readAsBinaryString(file);
        }
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏ —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ –ø–µ—Ä–≤—ã–º 5 —Å–∏–º–≤–æ–ª–∞–º
    const groupAndSummarizeData = (data) => {
        const grouped = {};

        data.forEach((row) => {
            // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è "–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–¥–∞–≤—Ü–∞"
            const key = row['–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–¥–∞–≤—Ü–∞']?.toString().substring(0, 5); // –ü–µ—Ä–≤—ã–µ 5 —Å–∏–º–≤–æ–ª–æ–≤

            if (!key) return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ –∑–Ω–∞—á–µ–Ω–∏—è

            if (!grouped[key]) {
                // –ï—Å–ª–∏ –∫–ª—é—á –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å –Ω—É–ª–µ–≤—ã–º–∏ —Å—É–º–º–∞–º–∏
                grouped[key] = {...row}; // –ö–æ–ø–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –±–∞–∑—É
                Object.keys(row).forEach((column) => {
                    if (typeof row[column] === 'number') {
                        grouped[key][column] = 0; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 0 –¥–ª—è –≤—Å–µ—Ö —á–∏—Å–ª–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
                    }
                });
                grouped[key]['–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–¥–∞–≤—Ü–∞'] = key; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª—é—á –∫–∞–∫ "–≥—Ä—É–ø–ø—É"
            }

            // –°—É–º–º–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
            Object.keys(row).forEach((column) => {
                if (typeof row[column] === 'number') {
                    grouped[key][column] += row[column];
                }
            });
        });

        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ –º–∞—Å—Å–∏–≤
        setGroupedData(Object.values(grouped));
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    const handleSort = (column) => {

        let direction = 'ascending';
        if (sortConfig && sortConfig.key === column && sortConfig.direction === 'ascending') {
            direction = 'descending';
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        if (groupedData.length > 1) {
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫ (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞)
            const headerRow = groupedData[0];

            // –í—Å–µ —Å—Ç—Ä–æ–∫–∏ (–≤–∫–ª—é—á–∞—è –∑–∞–≥–æ–ª–æ–≤–æ–∫)
            const dataRows = [...groupedData]; // –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ, –≤–∫–ª—é—á–∞—è –∑–∞–≥–æ–ª–æ–≤–æ–∫

            // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö (–≤–∫–ª—é—á–∞—è –∑–∞–≥–æ–ª–æ–≤–æ–∫)
            const sortedData = dataRows.sort((a, b) => {
                // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ —Å—Ç–æ–ª–±—Ü—É
                if (a[column] < b[column]) return direction === 'ascending' ? -1 : 1;
                if (a[column] > b[column]) return direction === 'ascending' ? 1 : -1;
                return 0;
            });

            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –º–∞—Å—Å–∏–≤–æ–º
            setGroupedData(sortedData);

            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
            setSortConfig({ key: column, direction });
        }
    };




    return (
        <div style={{padding: '20px'}}>
            <input
                type="file"
                accept=".xlsx, .xls"
                onChange={handleFileUpload}
                style={{marginBottom: '20px'}}
            />
            <div style={{overflowY: 'auto', maxHeight: '80vh', border: '1px solid #ccc'}}>
                <table border="1" style={{width: '100%', borderCollapse: 'collapse'}}>
                    <thead style={{position: 'sticky', top: 0, backgroundColor: '#fff', zIndex: 1}}>
                    <tr>
                        {groupedData[0] &&
                            Object.keys(groupedData[0]).map((key, index) => (
                                <th
                                    key={key}
                                    style={{
                                        cursor: index > 1 ? 'pointer' : 'default',
                                        backgroundColor: sortConfig?.key === key ? '#f0f0f0' : '',
                                    }}
                                    onClick={() => index > 1 && handleSort(key)}
                                >
                                    {key}
                                    {sortConfig?.key === key && (sortConfig.direction === 'ascending' ? ' üîº' : ' üîΩ')}
                                </th>
                            ))}
                    </tr>
                    </thead>
                    <tbody>
                    {groupedData.slice(0).map((row, index) => (
                        <tr key={index}>
                            {Object.values(row).map((value, i) => (
                                <td key={i}>{value}</td>
                            ))}
                        </tr>
                    ))}
                    </tbody>
                </table>
            </div>
        </div>
    );
}

export default ExcelUploader;
