import React, { useState } from 'react';
import * as XLSX from 'xlsx';

function ExcelUploader() {
    const [data, setData] = useState([]); // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const [groupedData, setGroupedData] = useState([]); // –°–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏ —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const [sortConfig, setSortConfig] = useState(null); // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    const [rowsToDisplay, setRowsToDisplay] = useState('–í—Å–µ'); // –û–ø—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å–µ —Å—Ç—Ä–æ–∫–∏)
    const [isDataLoaded, setIsDataLoaded] = useState(false); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
    const handleFileUpload = (event) => {
        const file = event.target.files[0]; // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–±—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

        if (file) {
            const reader = new FileReader();

            reader.onload = (e) => {
                const binaryStr = e.target.result; // –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –≤ –±–∏–Ω–∞—Ä–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
                const workbook = XLSX.read(binaryStr, { type: 'binary' }); // –ß–∏—Ç–∞–µ–º –∫–Ω–∏–≥—É Excel

                const sheetName = workbook.SheetNames[0]; // –ò–º—è –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Å—Ç–∞
                const sheet = workbook.Sheets[sheetName]; // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –ª–∏—Å—Ç–∞

                const jsonData = XLSX.utils.sheet_to_json(sheet); // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ª–∏—Å—Ç–∞ –≤ JSON
                setData(jsonData); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                groupAndSummarizeData(jsonData); // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –∏ —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è

                setIsDataLoaded(true); // –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
                setRowsToDisplay('–í—Å–µ'); // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏
            };

            reader.readAsBinaryString(file);
        }
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏ —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ –ø–µ—Ä–≤—ã–º 5 —Å–∏–º–≤–æ–ª–∞–º
    const groupAndSummarizeData = (data) => {
        const grouped = {};

        data.forEach((row) => {
            // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è "–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–¥–∞–≤—Ü–∞"
            const key = row['–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–¥–∞–≤—Ü–∞']?.toString().substring(0, 5); // –ü–µ—Ä–≤—ã–µ 5 —Å–∏–º–≤–æ–ª–æ–≤

            if (!key) return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ –∑–Ω–∞—á–µ–Ω–∏—è

            if (!grouped[key]) {
                // –ï—Å–ª–∏ –∫–ª—é—á –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å –Ω—É–ª–µ–≤—ã–º–∏ —Å—É–º–º–∞–º–∏
                grouped[key] = { ...row }; // –ö–æ–ø–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –±–∞–∑—É
                Object.keys(row).forEach((column) => {
                    if (typeof row[column] === 'number') {
                        grouped[key][column] = 0; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 0 –¥–ª—è –≤—Å–µ—Ö —á–∏—Å–ª–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
                    }
                });
                grouped[key]['–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–¥–∞–≤—Ü–∞'] = key; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª—é—á –∫–∞–∫ "–≥—Ä—É–ø–ø—É"
            }

            // –°—É–º–º–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
            Object.keys(row).forEach((column) => {
                if (typeof row[column] === 'number') {
                    grouped[key][column] += row[column];
                }
            });
        });

        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ –º–∞—Å—Å–∏–≤
        setGroupedData(Object.values(grouped));
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    const handleSort = (column) => {
        if (column === '–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–¥–∞–≤—Ü–∞' || column === '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞') return; // –ò—Å–∫–ª—é—á–∞–µ–º 1 –∏ 2 —Å—Ç–æ–ª–±—Ü—ã

        let direction = 'ascending';
        if (sortConfig && sortConfig.key === column && sortConfig.direction === 'ascending') {
            direction = 'descending';
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        if (groupedData.length > 1) {
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫
            const headerRow = groupedData[0];

            // –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ (–¥–∞–Ω–Ω—ã–µ)
            const dataRows = groupedData.slice(1);

            // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            const sortedData = dataRows.sort((a, b) => {
                if (a[column] < b[column]) return direction === 'ascending' ? -1 : 1;
                if (a[column] > b[column]) return direction === 'ascending' ? 1 : -1;
                return 0;
            });

            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ, –≤–∫–ª—é—á–∞—è –∑–∞–≥–æ–ª–æ–≤–æ–∫
            setGroupedData([headerRow, ...sortedData]);

            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
            setSortConfig({ key: column, direction });
        }
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞
    const handleRowsToDisplayChange = (event) => {
        const value = event.target.value;
        setRowsToDisplay(value); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ —á–∏—Å–µ–ª –¥–ª—è –æ–ø—Ü–∏–π
    const generateRowOptions = () => {
        const options = ['–í—Å–µ', 10, 20, 50, 100, 200];
        return options.map((option) => (
            <option key={option} value={option}>
                {option === '–í—Å–µ' ? '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ' : `–ü–æ–∫–∞–∑–∞—Ç—å ${option}`}
            </option>
        ));
    };

    // –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–æ–∫
    const rowsToDisplayCount = rowsToDisplay === '–í—Å–µ' ? groupedData.length : parseInt(rowsToDisplay);

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Excel
    const exportToExcel = () => {
        const visibleData = groupedData.slice(1, rowsToDisplayCount + 1); // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–∏–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
        const ws = XLSX.utils.json_to_sheet(visibleData); // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–∏–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç Excel
        const wb = XLSX.utils.book_new(); // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–Ω–∏–≥—É Excel
        XLSX.utils.book_append_sheet(wb, ws, '–î–∞–Ω–Ω—ã–µ'); // –î–æ–±–∞–≤–ª—è–µ–º –ª–∏—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ –∫–Ω–∏–≥—É
        XLSX.writeFile(wb, 'table_data.xlsx'); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    };

    return (
        <div style={{ padding: '20px' }}>
            <input
                type="file"
                accept=".xlsx, .xls"
                onChange={handleFileUpload}
                style={{ marginBottom: '20px' }}
            />
            {isDataLoaded && (
                <button onClick={exportToExcel} style={{ marginBottom: '20px' }}>
                    –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel
                </button>
            )}

            <div style={{ overflowY: 'auto', maxHeight: '80vh', border: '1px solid #ccc' }}>
                <table border="1" style={{ width: '100%', borderCollapse: 'collapse' }}>
                    <thead style={{ position: 'sticky', top: 0, backgroundColor: '#fff', zIndex: 1 }}>
                    <tr>
                        {/* –°—Ç–æ–ª–±–µ—Ü —Å –ø–æ—Ä—è–¥–∫–æ–≤—ã–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏ */}
                        <th>
                            {isDataLoaded && (
                                <select value={rowsToDisplay} onChange={handleRowsToDisplayChange}>
                                    {generateRowOptions()}
                                </select>
                            )}
                        </th>
                        {groupedData[0] &&
                            Object.keys(groupedData[0]).map((key, index) => (
                                <th
                                    key={key}
                                    style={{
                                        cursor: index > 1 ? 'pointer' : 'default',
                                        backgroundColor: sortConfig?.key === key ? '#f0f0f0' : '',
                                    }}
                                    onClick={() => index > 1 && handleSort(key)}
                                >
                                    {key}
                                    {sortConfig?.key === key && (sortConfig.direction === 'ascending' ? ' üîº' : ' üîΩ')}
                                </th>
                            ))}
                    </tr>
                    </thead>
                    <tbody>
                    {/* –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫, –∑–∞–¥–∞–Ω–Ω–æ–µ –≤ —Ñ–∏–ª—å—Ç—Ä–µ */}
                    {groupedData.slice(1, rowsToDisplayCount + 1).map((row, index) => (
                        <tr key={index}>
                            {/* –ü–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ */}
                            <td>{index + 1}</td>
                            {Object.values(row).map((value, i) => (
                                <td key={i}>{value}</td>
                            ))}
                        </tr>
                    ))}
                    </tbody>
                </table>
            </div>
        </div>
    );
}

export default ExcelUploader;
